#pragma once

#include "UHH2/core/include/Hists.h"
#include "UHH2/common/include/Utils.h"
#include <vector>
#include <TString.h>
#include <TFile.h>
#include <TH2.h>
#include "TUnfoldBinning.h"

using namespace std;

class UnfoldingHists: public uhh2::Hists {
public:
  UnfoldingHists(uhh2::Context & ctx, const std::string & dirname, const string & reco_sel_handle_name, const string & gen_sel_handle_name);

  virtual void fill(const uhh2::Event & ev) override;
  virtual ~UnfoldingHists();

protected:
  bool isMC;
  TH2D* h_N2DDT;  
  
  // uhh2::Event::Handle<bool> reco_sel_handle;
  // uhh2::Event::Handle<bool> gen_sel_handle;
  
  TUnfoldBinning* detector_binning_msd_pt;
  TUnfoldBinning* generator_binning_msd_pt;
  TH2D *h_pt_msd_response;
  TH1D *h_msd_detector, *h_msd_generator;
  
  
  const std::vector<double> pt_edges = {-1.0,200.00,210.00,220.00,230.00,240.00,250.00,260.00,270.00,280.00,290.00,300.00,310.00,320.00,330.00,340.00,350.00,360.00,370.00,380.00,390.00,400.00,410.00,420.00,430.00,440.00,450.00,460.00,470.00,480.00,490.00,500.00,510.00,520.00,530.00,540.00,550.00,560.00,570.00,580.00,590.00,600.00,610.00,620.00,630.00,640.00,650.00,660.00,670.00,680.00,690.00,700.00,710.00,720.00,730.00,740.00,750.00,760.00,770.00,780.00,790.00,800.00,810.00,820.00,830.00,840.00,850.00,860.00,870.00,880.00,890.00,900.00,910.00,920.00,930.00,940.00,950.00,960.00,970.00,980.00,990.00,1000.00,1010.00,1020.00,1030.00,1040.00,1050.00,1060.00,1070.00,1080.00,1090.00,1100.00,1110.00,1120.00,1130.00,1140.00,1150.00,1160.00,1170.00,1180.00,1190.00,1200.00,1201.00};

  const std::vector<double> msd_edges = {-1.00,50.00,51.00,52.00,53.00,54.00,55.00,56.00,57.00,58.00,59.00,60.00,61.00,62.00,63.00,64.00,65.00,66.00,67.00,68.00,69.00,70.00,71.00,72.00,73.00,74.00,75.00,76.00,77.00,78.00,79.00,80.00,81.00,82.00,83.00,84.00,85.00,86.00,87.00,88.00,89.00,90.00,91.00,92.00,93.00,94.00,95.00,96.00,97.00,98.00,99.00,100.00,101.00,102.00,103.00,104.00,105.00,106.00,107.00,108.00,109.00,110.00,111.00,112.00,113.00,114.00,115.00,116.00,117.00,118.00,119.00,120.00,121.00,122.00,123.00,124.00,125.00,126.00,127.00,128.00,129.00,130.00,131.00,132.00,133.00,134.00,135.00,136.00,137.00,138.00,139.00,140.00,141.00,142.00,143.00,144.00,145.00,146.00,147.00,148.00,149.00,150.00,151.00,152.00,153.00,154.00,155.00,156.00,157.00,158.00,159.00,160.00,161.00,162.00,163.00,164.00,165.00,166.00,167.00,168.00,169.00,170.00,171.00,172.00,173.00,174.00,175.00,176.00,177.00,178.00,179.00,180.00,181.00,182.00,183.00,184.00,185.00,186.00,187.00,188.00,189.00,190.00,191.00,192.00,193.00,194.00,195.00,196.00,197.00,198.00,199.00,200.00,201.00,202.00,203.00,204.00,205.00,206.00,207.00,208.00,209.00,210.00,211.00,212.00,213.00,214.00,215.00,216.00,217.00,218.00,219.00,220.00,221.00,222.00,223.00,224.00,225.00,226.00,227.00,228.00,229.00,230.00,231.00,232.00,233.00,234.00,235.00,236.00,237.00,238.00,239.00,240.00,241.00,242.00,243.00,244.00,245.00,246.00,247.00,248.00,249.00,250.00,251.00,252.00,253.00,254.00,255.00,256.00,257.00,258.00,259.00,260.00,261.00,262.00,263.00,264.00,265.00,266.00,267.00,268.00,269.00,270.00,271.00,272.00,273.00,274.00,275.00,276.00,277.00,278.00,279.00,280.00,281.00,282.00,283.00,284.00,285.00,286.00,287.00,288.00,289.00,290.00,291.00,292.00,293.00,294.00,295.00,296.00,297.00,298.00,299.00,300.00,301.00};
  
  TH1D * copy_book_th1d(TH1 * h, const std::string & newName);
  TH2D * copy_book_th2d(TH2 * h, const std::string & newName);

};
